/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: PriscilaSantiago (https://sketchfab.com/PriscilaSantiago)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/heart-emoji-fbe5ef1d09cb408c9c6dcdd7c0b47d9b
title: Heart Emoji
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import model from "./heart_emoji.glb"
import { useFrame } from "@react-three/fiber";
import { useSpring, animated, config } from '@react-spring/three';

export function HeartEmoji(props) {
  const { nodes, materials } = useGLTF(model);
  let ref = useRef();

  const [active, setActive] = useState(false)
  const { scaleValue } = useSpring({
    scaleValue: active ? 0.4 : 0.2,
    config: config.slow
  });

  useFrame(({clock}) => {
    ref.current.rotation.y += clock.getElapsedTime() * 0.0003;    
  });

  return (
    <animated.group ref={ref} {...props} scale={scaleValue} dispose={null} onPointerOver={e => setActive(true)} onPointerOut={e => setActive(false)}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.03}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials.pinkHeart}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3.geometry}
          material={materials["default"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.heartSparkles}
        />
      </group>
    </animated.group>
  );
}

useGLTF.preload("/heart_emoji.glb");
